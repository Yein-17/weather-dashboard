name: CI Pipeline with GHCR

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  GHCR_REGISTRY: ghcr.io

jobs:
  # Job 1: Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend
      
      - name: Run frontend tests
        run: npm test -- --coverage --watchAll=false --ci
        working-directory: ./frontend
        env:
          CI: true
      
      - name: ‚òÅÔ∏è Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: üîé Check frontend vulnerabilities
        run: npm audit --audit-level=moderate
        working-directory: ./frontend
        continue-on-error: true

  # Job 2: Backend Testing
  backend-test:
    name: Backend Tests & Audit
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: üì¶ Install backend dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov safety
        working-directory: ./backend

      - name: üß™ Run backend tests
        run: |
          pytest test_app.py -v --cov=app --cov-report=xml
        working-directory: ./backend
        env:
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}

      - name: ‚òÅÔ∏è Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: üîí Check backend vulnerabilities
        run: safety check --full-report
        working-directory: ./backend
        continue-on-error: true

  # Job 3: Build and Push to GHCR
  build-and-push:
    name: Build & Push Docker Images to GHCR
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üîê Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: üõ†Ô∏è Define image names (force lowercase)
        run: |
          USERNAME=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')
          FRONTEND_IMAGE="ghcr.io/$USERNAME/weather-frontend"
          BACKEND_IMAGE="ghcr.io/$USERNAME/weather-backend"
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=$BACKEND_IMAGE" >> $GITHUB_ENV

      - name: üõ†Ô∏è Build frontend image
        run: |
          docker build -t $FRONTEND_IMAGE:latest ./frontend
          docker tag $FRONTEND_IMAGE:latest $FRONTEND_IMAGE:${{ github.sha }}

      - name: üõ†Ô∏è Build backend image
        run: |
          docker build -t $BACKEND_IMAGE:latest ./backend
          docker tag $BACKEND_IMAGE:latest $BACKEND_IMAGE:${{ github.sha }}

      - name: üì§ Push frontend image
        run: |
          docker push $FRONTEND_IMAGE:latest
          docker push $FRONTEND_IMAGE:${{ github.sha }}

      - name: üì§ Push backend image
        run: |
          docker push $BACKEND_IMAGE:latest
          docker push $BACKEND_IMAGE:${{ github.sha }}

  # Job 4: Image Vulnerability Scan
  scan-images:
    name: Scan Docker Images with Trivy
    runs-on: ubuntu-latest
    needs: [build-and-push]

    steps:
      - name: üõ°Ô∏è Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:latest
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      - name: üõ°Ô∏è Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:latest
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'